/*
FD_ZERO(fd_set *fdset);将fd_set变量的所有位初始化为0
FD_SET(int fd,fd_set *fdset);在参数fdset指向的变量中注册文件描述符fd的信息
FD_CLR(int fd,fd_set *fdset);在参数fdset指向的变量中清除文件描述符fd的信息
FD_ISSET(int fd,fd_set *fdset);若参数fdset指向的变量中包含文件描述符fd的信息，则返回“真”

#include<sys/select.h>
#include<sys/time.h>
int select(int maxfd,fd_set *readset,fd_set *writeset,fd_set *exceptset,const struct timeval *timeout);
    成功时返回大于0的值，失败时返回-1。只有在监视的文件描述符发生变化时才返回。如果未发生变化，就会进入阻塞。
    maxfd:      监视对象文件描述符数量
    readset:    将所有关注“是否存在待读取数据”的文件描述符注册到fd_set型变量，并传递其地址值
    writeset:   将所有关注“是否可传输无阻塞数据”的文件描述符注册到fd_set型变量，并传递其地址值
    exceptset:  将所有关注“是否发生异常”的文件描述符注册到fd_set型变量，并传递其地址值
    timeout:    调用select函数后，为防止陷入无限阻塞的状态，传递超时信息
    返回值：    发生错误返回-1，超时返回0，因发生的关注的事件返回大于0的值，该值为文件描述符的数量

struct timeval{
    long tv_sec;    //seconds
    long tv_usec;   //microseconds
};
*/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<sys/wait.h>
#include<signal.h>
#include<time.h>
#include<string.h>
#include<sys/select.h>
#define BUF_SIZE 100
void error_handling(char *message);
int main(int argc,char *argv[])
{
    int serv_sock,clnt_sock;

    struct sockaddr_in serv_adr,clnt_adr;
    struct timeval timeout;
    fd_set reads,cpy_reads;
    socklen_t adr_sz;

    int fd_max,len,fd_num,i;
    char buf[BUF_SIZE];

    if(argc!=2){
        printf("Usage:%s <port>\n",argv[0]);
        exit(1);
    }

    serv_sock=socket(PF_INET,SOCK_STREAM,0);
    if(serv_sock==-1) error_handling("socket error");

    memset(&serv_adr,0,sizeof(serv_adr));
    serv_adr.sin_family=AF_INET;
    serv_adr.sin_addr.s_addr=htonl(INADDR_ANY);///htonl将小端序转换为大端序
    serv_adr.sin_port=htons(atoi(argv[1]));    ///htons将小端序转换为大端序

    if(bind(serv_sock,(struct *sockaddr)&serv_adr,sizeof(serv_adr))==-1)
        error_handling("bind error");

    if(listen(serv_sock,5)==-1)
        error_handling("listen error");

    FD_ZERO(&reads);
    FD_SET(serv_sock,&reads);
    fd_max=serv_sock;
    while(1){
        cpy_reads=reads;
        timeout.tv_sec=5;
        timeout.tv_usec=5000;
        
        if((fd_num=select(fd_max+1,&cpy_reads,0,0,&timeout))==-1)
            break;
        if(fd_num==0) continue;
        
        for(i=0;i<=fd_max;i++){
            if(FD_ISSET(i,&cpy_reads)){
                if(i==serv_sock){       ///connectiong request!
                    adr_sz=sizeof(clnt_adr);
                    clnt_sock=accept(serv_sock,(struct sockaddr*)&clnt_adr,&adr_sz);
                    FD_SET(clnt_sock,&reads);
                    if(fd_max<clnt_sock) fd_max=clnt_sock;
                    printf("connected client :%d\n",clnt_sock);
                }
                else{                   ///read message!
                    len=read(i,buf,BUF_SIZE);
                    if(len==0){          ///close request
                        FD_CLR(i,&reads);
                        close(i);
                        printf("closed client:%d\n",i);
                    }
                    else{
                        write(i,buf,len);
                    }
                }
            }
        }
    }
    close(serv_sock);
    return 0;
}

void error_handling(char *message){
    fputs(message,stderr);
    fputs('\n',stderr);
    exit(1);
}

