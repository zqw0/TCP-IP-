/*
#include<unistd.h>
int dup(int files);
int dup2(int fildes,int fildes2);
    成功时返回复制的文件描述符，失败时返回-1.
    fildes      需要复制的文件描述符
    fildes2     明确指定的文件描述符

*/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<sys/wait.h>
#include<signal.h>
#include<time.h>
#include<string.h>
#include<sys/select.h>
#define BUF_SIZE 100
void error_handling(char *message);
int main(int argc,char *argv[])
{
    int serv_sock,clnt_sock;
    FILE *readfp;
    FILE *writefp;
    struct sockaddr_in serv_adr,clnt_adr;
    socklen_t adr_sz;

    int fd_max,len,fd_num,i;
    char buf[BUF_SIZE];

    if(argc!=2){
        printf("Usage:%s <port>\n",argv[0]);
        exit(1);
    }

    serv_sock=socket(PF_INET,SOCK_STREAM,0);
    if(serv_sock==-1) error_handling("socket error");

    memset(&serv_adr,0,sizeof(serv_adr));
    serv_adr.sin_family=AF_INET;
    serv_adr.sin_addr.s_addr=htonl(INADDR_ANY);///htonl将小端序转换为大端序
    serv_adr.sin_port=htons(atoi(argv[1]));    ///htons将小端序转换为大端序

    if(bind(serv_sock,(struct *sockaddr)&serv_adr,sizeof(serv_adr))==-1)
        error_handling("bind error");

    if(listen(serv_sock,5)==-1)
        error_handling("listen error");
    adr_sz=sizeof(clnt_adr);
    clnt_sock=accept(serv_sock,(struct *sockaddr)&clnt_adr,&adr_sz);
    
    readfp=fdopen(clnt_sock,"r");
    writefp=fdopen(dup(clnt_sock),"w");
    fputs("FROM SERVER: HI !",writerfp);
    fflush(writefp);
    
    shutdown(fileno(writefp),SHUT_WR);
    fclose(writefp);
    
    fgets(buf,sizeof(buf),readfp);fputs(buf,stdout);
    fclose(readfp);
    return 0;
}

void error_handling(char *message){
    fputs(message,stderr);
    fputs('\n',stderr);
    exit(1);
}

