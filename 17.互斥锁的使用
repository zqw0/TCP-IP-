/*
#include<pthread.h>
int pthread_mutex_init(pthread_mutx_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_destory(pthread_mutex_t *mutex);
    成功时返回0，失败时返回其他值。
    mutex:      创建互斥量时传递保存互斥量的变量地址值，销毁时传递需要销毁的互斥量地址值
    attr:       传递即将创建的互斥量属性，没有特别需要制定的属性时传递NULL。

#include<pthread.h>
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
    成功时返回0，失败时返回其他值
*/
#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>
#define NUM_THREAD 50
#define EPOLL_SIZE 50
void* thread_inc(void *arg);
void* thread_des(void *arg);
long long num=0;
pthread_mutex_t mutex;

int main()
{
    pthread_t t_id[NUM_THREAD];
    int i;

    pthread_mutex_init(&mutex,NULL);

    for(i=0;i<NUM_THREAD;i++){
        if(i%2)
            pthread_create(&t_id[i],NULL,thread_inc,NULL);
        else
            pthread_create(&t_id[i],NULL,thread_des,NULL);
    }

    for(i=0;i<NUM_THREAD;i++){
        pthread_join(t_id[i],NULL);
        printf("%d\n",i);
    }

    printf("result:%lld\n",num);
    pthread_mutex_destroy(&mutex);
    return 0;
}
void* thread_inc(void *arg){
    int i;
    pthread_mutex_lock(&mutex);
    for(i=0;i<5000000;i++)
        num+=1;
    pthread_mutex_unlock(&mutex);
    return NULL;
}
void* thread_des(void *arg){
    int i;
    pthread_mutex_lock(&mutex);
    for(i=0;i<5000000;i++){
        num-=1;
    }
    pthread_mutex_unlock(&mutex);
    return NULL;
}

