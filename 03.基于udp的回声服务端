/*
ssize_t sendto(int sock,void *buff,size_t nbytes,int flags,struct sockaddr *to,socklen_t addrlen);
  成功时返回传输字节数，失败时返回1；
  sock:     udp文件描述符
  buff:     信息缓冲地址
  nbytes:   传输数据长度
  flags:    可选参数，没有传递0
  to:       目标地址
  addrlen:  目标地址长度

ssize_t recvfrom(int sock,void *buff,size_t nbytes,int flags,struct sockaddr *from,socklen_t *addrlen);
  成功时返回接收字节数，失败时返回1；
  sock:     udp文件描述符
  buff:     信息缓冲地址
  nbytes:   传输数据长度
  flags:    可选参数，没有传递0
  from:     接收目标地址
  addrlen:  目标地址长度
 
*/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#define BUF_SIZE 30
void error_handling(char *message);
int main(int argc,char *argv[])
{
    int ser_sock;
    char message[BUF_SIZE];
    int len;
    socklen_t clnt_adr_sz;
    struct sockaddr_in ser_adr,clnt_adr;
    if(argc!=2) exit(1);
    
    ser_sock=socket(PF_INET,SOCK_DGRAM,0);
    if(ser_sock==-1) error_handling("socket error");
    
    memset(&ser_adr,0,sizeof(ser_adr));
    ser_adr.sin_family=AF_INET;
    ser_adr.sin_addr.s_add=htonl(INADDR_ANY);
    ser_adr.sin_port=htons(atoi(argv[1]));
    
    if(bind(ser_sock,(struct sockaddr*)&ser_adr,sizeof(ser_adr))==-1)
        error_handling("bind error");
    
    while(1){
        clnt_adr_sz=sizeof(clnt_adr);
        len=recvfrom(ser_sock,message,BUF_SIZE,0,
                     (struct *sockaddr)&clnt_adr,&clnt_adr_sz);
        sendto(ser_sock,message,len,0,
               (struct *sockaddr)&clnt_adr,clnt_adr_sz);
    }
    close(ser_sock);
    return 0;
}

void error_handling(char *message){
    fputs(message,stderr);
    fputs('\n',stderr);
    exit(1);
}
