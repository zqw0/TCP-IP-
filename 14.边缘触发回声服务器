
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<sys/wait.h>
#include<signal.h>
#include<time.h>
#include<string.h>
#include<sys/select.h>
#define BUF_SIZE 100
#define EPOLL_SIZE 50
void error_handling(char *message);
void setnonblockintmode(int fd);
int main(int argc,char *argv[])
{
    int serv_sock,clnt_sock,len,i,epfd,event_cnt;

    struct sockaddr_in ser_adr,clnt_adr;
    struct epoll_event *ep_events;
    struct epoll_event event;
    socklen_t adr_sz;

    if(argc!=2){
        printf("Usage:%s <port>\n",argv[0]);
        exit(1);
    }

    serv_sock=socket(PF_INET,SOCK_STREAM,0);
    if(serv_sock==-1) error_handling("socket error");

    memset(&ser_adr,0,sizeof(ser_adr));
    ser_adr.sin_family=AF_INET;
    ser_adr.sin_addr.s_addr=htonl(INADDR_ANY);///htonl将小端序转换为大端序
    ser_adr.sin_port=htons(atoi(argv[1]));    ///htons将小端序转换为大端序

    if(bind(serv_sock,(struct *sockaddr)&ser_adr,sizeof(ser_adr))==-1)
        error_handling("bind error");

    if(listen(serv_sock,5)==-1)
        error_handling("listen error");

    epfd=epoll_create(EPOLL_SIZE);
    ep_events=new epoll_event[EPOLL_SIZE];

    event.events=EPOLLIN;
    event.data.fd=serv_sock;
    epoll_ctl(epfd,EPOLL_CTL_ADD,serv_sock,&event);

    while(1){
        event_cnt=epoll_wait(epfd,ep_events,EPOLL_SIZE,-1);
        if(event_cnt==-1){
            puts("epoll_wait error!");
            break;
        }

        for(i=0;i<event_cnt;i++){
            if(ep_events[i].data.fd==serv_sock){
                adr_sz=sizeof(clnt_adr);
                clnt_sock=accept(serv_sock,(struct *sockaddr)&clnt_adr,&adr_sz);
                setnonblockintmode(clnt_sock);
                event.events=EPOLLIN|EPOLLET;
                event.data.fd=clnt_sock;
                epoll_ctl(epfd,EPOLL_CTL_ADD,clnt_sock,&event);
                printf("connect client :%d\n",clnt_sock);
            }
            else{
                while(1){           ///因为tcp没有数据边界，要一直尝试读取，直到读完缓冲区数据
                    len=read(ep_events[i].data.fd,buf,BUF_SIZE);
                    if(len==0){     ///close request!
                        epoll_ctl(epfd,EPOLL_CTL_DEL,ep_events[i].data.fd,NULL);
                        close(ep_events[i].data.fd);
                        printf("close client :%d\n",ep_events[i].data.fd);
                        break;
                    }
                    else if(len<0){             ///表示读无可读时
                        if(errno==EAGAIN) break;
                    }
                    else{
                        write(ep_events[i].data.fd,buf,len);  ///echo!
                    }
                }
            }
        }
    }
    close(epfd);
    close(serv_sock);
    return 0;
}

void error_handling(char *message){
    fputs(message,stderr);
    fputs('\n',stderr);
    exit(1);
}
void setnonblockintmode(int fd){
    int flag=fcntl(fd,F_GETFL,0);
    fcntl(fd,F_SETFL,flag|O_NONBLOCK);
}

