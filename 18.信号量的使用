/*
#include<semaphore.h>
int sem_init(sem_t *sem,int pshared,unsigned int value);
int sem_destroy(sem_t *sem);
    成功时返回0，失败时返回其他值
    sem:            创建信号量时传递保存信号量的变量地址值，销毁时传递需要销毁的信号量变量地址值。
    pshared:        传递其他值时，创建可由多个进程共享的信号量，传递0时，创建只允许一个进程内部使用的信号量。我们需要完成同一进程内的线程同步，故传递0.
    value           指定新创建的信号量初始值。

#include<semaphore.h>
int sem_post(sem_t *sem);
int sem_wait(sem_t *sem);
    成功时返回0，失败时返回其他值
    sem:            传递保存信号量读取值的变量地址值，传递给sem_post时信号量增1，传递给sem_wait时信号量减1.
*/
#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>
#include<semaphore.h>
#define NUM_THREAD 50
#define EPOLL_SIZE 50
void * read(void *arg);
void * accu(void *arg);
static sem_t sem_one;
static sem_t sem_two;
static int num;

int main()
{
    pthread_t id_t1,id_t2;
    sem_init(&sem_one,0,0);
    sem_init(&sem_two,0,1);
    
    pthread_create(&id_t1,NULL,read,NULL);
    pthread_create(&id_t2,NULL,accu,NULL);
    
    pthread_join(id_t1,NULL);
    pthread_join(id_t2,NULL);
    
    sem_destroy(&sem_one);
    sem_destroy(&sem_two);
    return 0;
}

void* read(void *arg){
    int i;
    for(i=0;i<5;i++){
        fputs("input num:");
        sem_wait(&sem_two);
        scanf("%d",&num);
        sem_post(&sem_one);
    }
    return NULL;
}
void *accu(void *arg){
    int sum=0,i;
    for(i=0;i<5;i++){
        sem_wait(&sem_one);
        sum+=num;
        sem_post(&sem_two);
    }
    printf("Result:%d",sum);
    return NULL;
}

